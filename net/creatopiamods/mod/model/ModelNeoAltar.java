// Date: 01/09/2014 16:02:59
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package net.creatopiamods.mod.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelNeoAltar extends ModelBase
{
  //fields
    ModelRenderer corne1;
    ModelRenderer coinbas1;
    ModelRenderer coinbas2;
    ModelRenderer pied1;
    ModelRenderer corne2;
    ModelRenderer pied_3;
    ModelRenderer pied2;
    ModelRenderer blocprincipal;
    ModelRenderer pillier8;
    ModelRenderer pied4;
    ModelRenderer corne5;
    ModelRenderer corne4;
    ModelRenderer pillier7;
    ModelRenderer pillier1;
    ModelRenderer corne3;
    ModelRenderer pillier2;
    ModelRenderer corne6;
    ModelRenderer pillier4;
    ModelRenderer pillier6;
    ModelRenderer coin2;
    ModelRenderer pillier5;
    ModelRenderer coinbas3;
    ModelRenderer coin3;
    ModelRenderer coin4;
    ModelRenderer coin1;
    ModelRenderer corne7;
    ModelRenderer corne8;
    ModelRenderer pillier3;
    ModelRenderer coinbas4;
  
  public ModelNeoAltar()
  {
    textureWidth = 64;
    textureHeight = 64;
    
      corne1 = new ModelRenderer(this, 8, 26);
      corne1.addBox(0F, 0F, 0F, 1, 1, 1);
      corne1.setRotationPoint(-4F, 8F, -8F);
      corne1.setTextureSize(64, 64);
      corne1.mirror = true;
      setRotation(corne1, 0F, 0F, 0F);
      coinbas1 = new ModelRenderer(this, 28, 60);
      coinbas1.addBox(0F, 0F, 0F, 3, 1, 3);
      coinbas1.setRotationPoint(4F, 13F, 4F);
      coinbas1.setTextureSize(64, 64);
      coinbas1.mirror = true;
      setRotation(coinbas1, 0F, 0F, 0F);
      coinbas2 = new ModelRenderer(this, 40, 60);
      coinbas2.addBox(0F, 0F, 0F, 3, 1, 3);
      coinbas2.setRotationPoint(-7F, 13F, 4F);
      coinbas2.setTextureSize(64, 64);
      coinbas2.mirror = true;
      setRotation(coinbas2, 0F, 0F, 0F);
      pied1 = new ModelRenderer(this, 52, 46);
      pied1.addBox(0F, 0F, 0F, 3, 2, 3);
      pied1.setRotationPoint(5F, 22F, -8F);
      pied1.setTextureSize(64, 64);
      pied1.mirror = true;
      setRotation(pied1, 0F, 0F, 0F);
      corne2 = new ModelRenderer(this, 4, 26);
      corne2.addBox(0F, 0F, 0F, 1, 1, 1);
      corne2.setRotationPoint(3F, 8F, -8F);
      corne2.setTextureSize(64, 64);
      corne2.mirror = true;
      setRotation(corne2, 0F, 0F, 0F);
      pied_3 = new ModelRenderer(this, 52, 36);
      pied_3.addBox(0F, 0F, 0F, 3, 2, 3);
      pied_3.setRotationPoint(-8F, 22F, 5F);
      pied_3.setTextureSize(64, 64);
      pied_3.mirror = true;
      setRotation(pied_3, 0F, 0F, 0F);
      pied2 = new ModelRenderer(this, 52, 51);
      pied2.addBox(0F, 0F, 0F, 3, 2, 3);
      pied2.setRotationPoint(5F, 22F, 5F);
      pied2.setTextureSize(64, 64);
      pied2.mirror = true;
      setRotation(pied2, 0F, 0F, 0F);
      blocprincipal = new ModelRenderer(this, 0, 0);
      blocprincipal.addBox(0F, 0F, 0F, 14, 8, 14);
      blocprincipal.setRotationPoint(-7F, 14F, -7F);
      blocprincipal.setTextureSize(64, 64);
      blocprincipal.mirror = true;
      setRotation(blocprincipal, 0F, 0F, 0F);
      pillier8 = new ModelRenderer(this, 0, 46);
      pillier8.addBox(0F, 0F, 0F, 1, 14, 2);
      pillier8.setRotationPoint(7F, 9F, 3F);
      pillier8.setTextureSize(64, 64);
      pillier8.mirror = true;
      setRotation(pillier8, 0F, 0F, 0F);
      pied4 = new ModelRenderer(this, 52, 41);
      pied4.addBox(0F, 0F, 0F, 3, 2, 3);
      pied4.setRotationPoint(-8F, 22F, -8F);
      pied4.setTextureSize(64, 64);
      pied4.mirror = true;
      setRotation(pied4, 0F, 0F, 0F);
      corne5 = new ModelRenderer(this, 20, 26);
      corne5.addBox(0F, 0F, 0F, 1, 1, 1);
      corne5.setRotationPoint(3F, 8F, 7F);
      corne5.setTextureSize(64, 64);
      corne5.mirror = true;
      setRotation(corne5, 0F, 0F, 0F);
      corne4 = new ModelRenderer(this, 0, 26);
      corne4.addBox(0F, 0F, 0F, 1, 1, 1);
      corne4.setRotationPoint(7F, 8F, 3F);
      corne4.setTextureSize(64, 64);
      corne4.mirror = true;
      setRotation(corne4, 0F, 0F, 0F);
      pillier7 = new ModelRenderer(this, 0, 28);
      pillier7.addBox(0F, 0F, 0F, 1, 14, 2);
      pillier7.setRotationPoint(7F, 9F, -5F);
      pillier7.setTextureSize(64, 64);
      pillier7.mirror = true;
      setRotation(pillier7, 0F, 0F, 0F);
      pillier1 = new ModelRenderer(this, 18, 30);
      pillier1.addBox(0F, 0F, 0F, 2, 14, 1);
      pillier1.setRotationPoint(3F, 9F, 7F);
      pillier1.setTextureSize(64, 64);
      pillier1.mirror = true;
      setRotation(pillier1, 0F, 0F, 0F);
      corne3 = new ModelRenderer(this, 6, 28);
      corne3.addBox(0F, 0F, 0F, 1, 1, 1);
      corne3.setRotationPoint(7F, 8F, -4F);
      corne3.setTextureSize(64, 64);
      corne3.mirror = true;
      setRotation(corne3, 0F, 0F, 0F);
      pillier2 = new ModelRenderer(this, 18, 47);
      pillier2.addBox(0F, 0F, 0F, 2, 14, 1);
      pillier2.setRotationPoint(-5F, 9F, 7F);
      pillier2.setTextureSize(64, 64);
      pillier2.mirror = true;
      setRotation(pillier2, 0F, 0F, 0F);
      corne6 = new ModelRenderer(this, 16, 26);
      corne6.addBox(0F, 0F, 0F, 1, 1, 1);
      corne6.setRotationPoint(-4F, 8F, 7F);
      corne6.setTextureSize(64, 64);
      corne6.mirror = true;
      setRotation(corne6, 0F, 0F, 0F);
      pillier4 = new ModelRenderer(this, 12, 46);
      pillier4.addBox(0F, 0F, 0F, 1, 14, 2);
      pillier4.setRotationPoint(-8F, 9F, -5F);
      pillier4.setTextureSize(64, 64);
      pillier4.mirror = true;
      setRotation(pillier4, 0F, 0F, 0F);
      pillier6 = new ModelRenderer(this, 6, 47);
      pillier6.addBox(0F, 0F, 0F, 2, 14, 1);
      pillier6.setRotationPoint(3F, 9F, -8F);
      pillier6.setTextureSize(64, 64);
      pillier6.mirror = true;
      setRotation(pillier6, 0F, 0F, 0F);
      coin2 = new ModelRenderer(this, 28, 58);
      coin2.addBox(0F, 0F, 0F, 1, 1, 1);
      coin2.setRotationPoint(-7F, 12F, 6F);
      coin2.setTextureSize(64, 64);
      coin2.mirror = true;
      setRotation(coin2, 0F, 0F, 0F);
      pillier5 = new ModelRenderer(this, 6, 30);
      pillier5.addBox(0F, 0F, 0F, 2, 14, 1);
      pillier5.setRotationPoint(-5F, 9F, -8F);
      pillier5.setTextureSize(64, 64);
      pillier5.mirror = true;
      setRotation(pillier5, 0F, 0F, 0F);
      coinbas3 = new ModelRenderer(this, 52, 60);
      coinbas3.addBox(0F, 0F, 0F, 3, 1, 3);
      coinbas3.setRotationPoint(-7F, 13F, -7F);
      coinbas3.setTextureSize(64, 64);
      coinbas3.mirror = true;
      setRotation(coinbas3, 0F, 0F, 0F);
      coin3 = new ModelRenderer(this, 24, 58);
      coin3.addBox(0F, 0F, 0F, 1, 1, 1);
      coin3.setRotationPoint(-7F, 12F, -7F);
      coin3.setTextureSize(64, 64);
      coin3.mirror = true;
      setRotation(coin3, 0F, 0F, 0F);
      coin4 = new ModelRenderer(this, 24, 60);
      coin4.addBox(0F, 0F, 0F, 1, 1, 1);
      coin4.setRotationPoint(6F, 12F, -7F);
      coin4.setTextureSize(64, 64);
      coin4.mirror = true;
      setRotation(coin4, 0F, 0F, 0F);
      coin1 = new ModelRenderer(this, 24, 62);
      coin1.addBox(0F, 0F, 0F, 1, 1, 1);
      coin1.setRotationPoint(6F, 12F, 6F);
      coin1.setTextureSize(64, 64);
      coin1.mirror = true;
      setRotation(coin1, 0F, 0F, 0F);
      corne7 = new ModelRenderer(this, 18, 28);
      corne7.addBox(0F, 0F, 0F, 1, 1, 1);
      corne7.setRotationPoint(-8F, 8F, 3F);
      corne7.setTextureSize(64, 64);
      corne7.mirror = true;
      setRotation(corne7, 0F, 0F, 0F);
      corne8 = new ModelRenderer(this, 12, 26);
      corne8.addBox(0F, 0F, 0F, 1, 1, 1);
      corne8.setRotationPoint(-8F, 8F, -4F);
      corne8.setTextureSize(64, 64);
      corne8.mirror = true;
      setRotation(corne8, 0F, 0F, 0F);
      pillier3 = new ModelRenderer(this, 12, 28);
      pillier3.addBox(0F, 0F, 0F, 1, 14, 2);
      pillier3.setRotationPoint(-8F, 9F, 3F);
      pillier3.setTextureSize(64, 64);
      pillier3.mirror = true;
      setRotation(pillier3, 0F, 0F, 0F);
      coinbas4 = new ModelRenderer(this, 52, 56);
      coinbas4.addBox(0F, 0F, 0F, 3, 1, 3);
      coinbas4.setRotationPoint(4F, 13F, -7F);
      coinbas4.setTextureSize(64, 64);
      coinbas4.mirror = true;
      setRotation(coinbas4, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5,entity);
    corne1.render(f5);
    coinbas1.render(f5);
    coinbas2.render(f5);
    pied1.render(f5);
    corne2.render(f5);
    pied_3.render(f5);
    pied2.render(f5);
    blocprincipal.render(f5);
    pillier8.render(f5);
    pied4.render(f5);
    corne5.render(f5);
    corne4.render(f5);
    pillier7.render(f5);
    pillier1.render(f5);
    corne3.render(f5);
    pillier2.render(f5);
    corne6.render(f5);
    pillier4.render(f5);
    pillier6.render(f5);
    coin2.render(f5);
    pillier5.render(f5);
    coinbas3.render(f5);
    coin3.render(f5);
    coin4.render(f5);
    coin1.render(f5);
    corne7.render(f5);
    corne8.render(f5);
    pillier3.render(f5);
    coinbas4.render(f5);
  }
  
  public void renderModel(float f) {
	  corne1.render(f);
	    coinbas1.render(f);
	    coinbas2.render(f);
	    pied1.render(f);
	    corne2.render(f);
	    pied_3.render(f);
	    pied2.render(f);
	    blocprincipal.render(f);
	    pillier8.render(f);
	    pied4.render(f);
	    corne5.render(f);
	    corne4.render(f);
	    pillier7.render(f);
	    pillier1.render(f);
	    corne3.render(f);
	    pillier2.render(f);
	    corne6.render(f);
	    pillier4.render(f);
	    pillier6.render(f);
	    coin2.render(f);
	    pillier5.render(f);
	    coinbas3.render(f);
	    coin3.render(f);
	    coin4.render(f);
	    coin1.render(f);
	    corne7.render(f);
	    corne8.render(f);
	    pillier3.render(f);
	    coinbas4.render(f);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }

}
